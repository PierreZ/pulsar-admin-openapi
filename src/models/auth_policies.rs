/*
 * Pulsar Admin REST API
 *
 * This provides the REST API for admin operations
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthPolicies {
    #[serde(rename = "namespace_auth", skip_serializing_if = "Option::is_none")]
    pub namespace_auth: Option<NamespaceAuth>,
    #[serde(rename = "destination_auth", skip_serializing_if = "Option::is_none")]
    pub destination_auth: Option<DestinationAuth>,
    #[serde(rename = "subscription_auth_roles", skip_serializing_if = "Option::is_none")]
    pub subscription_auth_roles: Option<::std::collections::HashMap<String, Vec<String>>>,
}

impl AuthPolicies {
    pub fn new() -> AuthPolicies {
        AuthPolicies {
            namespace_auth: None,
            destination_auth: None,
            subscription_auth_roles: None,
        }
    }
}

/// 
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum NamespaceAuth {
    #[serde(rename = "produce")]
    Produce,
    #[serde(rename = "consume")]
    Consume,
    #[serde(rename = "functions")]
    Functions,
}
/// 
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum DestinationAuth {
    #[serde(rename = "produce")]
    Produce,
    #[serde(rename = "consume")]
    Consume,
    #[serde(rename = "functions")]
    Functions,
}

