/*
 * Pulsar Admin REST API
 *
 * This provides the REST API for admin operations
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct BookiesApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> BookiesApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> BookiesApiClient<C> {
        BookiesApiClient {
            configuration: configuration,
        }
    }
}

pub trait BookiesApi {
    fn delete_bookie_rack_info(&self, bookie: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_bookie_rack_info(&self, bookie: &str) -> Box<Future<Item = crate::models::BookieInfo, Error = Error<serde_json::Value>>>;
    fn get_bookies_rack_info(&self, ) -> Box<Future<Item = ::std::collections::HashMap<String, ::std::collections::HashMap<String, crate::models::BookieInfo>>, Error = Error<serde_json::Value>>>;
    fn update_bookie_rack_info(&self, bookie: &str, group: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>BookiesApi for BookiesApiClient<C> {
    fn delete_bookie_rack_info(&self, bookie: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/bookies/racks-info/{bookie}".to_string())
            .with_path_param("bookie".to_string(), bookie.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_bookie_rack_info(&self, bookie: &str) -> Box<Future<Item = crate::models::BookieInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/bookies/racks-info/{bookie}".to_string())
            .with_path_param("bookie".to_string(), bookie.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_bookies_rack_info(&self, ) -> Box<Future<Item = ::std::collections::HashMap<String, ::std::collections::HashMap<String, crate::models::BookieInfo>>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/bookies/racks-info".to_string())
            .execute(self.configuration.borrow())
    }

    fn update_bookie_rack_info(&self, bookie: &str, group: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/bookies/racks-info/{bookie}".to_string())
            .with_query_param("group".to_string(), group.to_string())
            .with_path_param("bookie".to_string(), bookie.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

}
