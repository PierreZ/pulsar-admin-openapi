/*
 * Pulsar Admin REST API
 *
 * This provides the REST API for admin operations
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct BrokersApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> BrokersApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> BrokersApiClient<C> {
        BrokersApiClient {
            configuration: configuration,
        }
    }
}

pub trait BrokersApi {
    fn get_active_brokers(&self, cluster: &str) -> Box<Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn get_all_dynamic_configurations(&self, ) -> Box<Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_dynamic_configuration_name(&self, ) -> Box<Future<Item = Vec<serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn get_internal_configuration_data(&self, ) -> Box<Future<Item = crate::models::InternalConfigurationData, Error = Error<serde_json::Value>>>;
    fn get_owned_namespaes(&self, cluster_name: &str, broker_webserviceurl: &str) -> Box<Future<Item = ::std::collections::HashMap<String, crate::models::NamespaceOwnershipStatus>, Error = Error<serde_json::Value>>>;
    fn get_runtime_configuration(&self, ) -> Box<Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>>;
    fn healthcheck(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_dynamic_configuration(&self, config_name: &str, config_value: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>BrokersApi for BrokersApiClient<C> {
    fn get_active_brokers(&self, cluster: &str) -> Box<Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/brokers/{cluster}".to_string())
            .with_path_param("cluster".to_string(), cluster.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_all_dynamic_configurations(&self, ) -> Box<Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/brokers/configuration/values".to_string())
            .execute(self.configuration.borrow())
    }

    fn get_dynamic_configuration_name(&self, ) -> Box<Future<Item = Vec<serde_json::Value>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/brokers/configuration".to_string())
            .execute(self.configuration.borrow())
    }

    fn get_internal_configuration_data(&self, ) -> Box<Future<Item = crate::models::InternalConfigurationData, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/brokers/internal-configuration".to_string())
            .execute(self.configuration.borrow())
    }

    fn get_owned_namespaes(&self, cluster_name: &str, broker_webserviceurl: &str) -> Box<Future<Item = ::std::collections::HashMap<String, crate::models::NamespaceOwnershipStatus>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/brokers/{clusterName}/{broker-webserviceurl}/ownedNamespaces".to_string())
            .with_path_param("clusterName".to_string(), cluster_name.to_string())
            .with_path_param("broker-webserviceurl".to_string(), broker_webserviceurl.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_runtime_configuration(&self, ) -> Box<Future<Item = ::std::collections::HashMap<String, serde_json::Value>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/brokers/configuration/runtime".to_string())
            .execute(self.configuration.borrow())
    }

    fn healthcheck(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/brokers/health".to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn update_dynamic_configuration(&self, config_name: &str, config_value: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/brokers/configuration/{configName}/{configValue}".to_string())
            .with_path_param("configName".to_string(), config_name.to_string())
            .with_path_param("configValue".to_string(), config_value.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

}
