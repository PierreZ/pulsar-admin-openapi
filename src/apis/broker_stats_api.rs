/*
 * Pulsar Admin REST API
 *
 * This provides the REST API for admin operations
 *
 * The version of the OpenAPI document: v2
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct BrokerStatsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> BrokerStatsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> BrokerStatsApiClient<C> {
        BrokerStatsApiClient {
            configuration: configuration,
        }
    }
}

pub trait BrokerStatsApi {
    fn get_allocator_stats(&self, allocator: &str) -> Box<Future<Item = crate::models::AllocatorStats, Error = Error<serde_json::Value>>>;
    fn get_broker_resource_availability(&self, tenant: &str, namespace: &str) -> Box<Future<Item = ::std::collections::HashMap<String, crate::models::ResourceUnit>, Error = Error<serde_json::Value>>>;
    fn get_load_report(&self, ) -> Box<Future<Item = crate::models::LoadReport, Error = Error<serde_json::Value>>>;
    fn get_m_beans(&self, ) -> Box<Future<Item = Vec<crate::models::Metrics>, Error = Error<serde_json::Value>>>;
    fn get_metrics(&self, ) -> Box<Future<Item = Vec<crate::models::Metrics>, Error = Error<serde_json::Value>>>;
    fn get_pending_bookie_ops_stats(&self, ) -> Box<Future<Item = ::std::collections::HashMap<String, crate::models::PendingBookieOpsStats>, Error = Error<serde_json::Value>>>;
    fn get_topics2(&self, ) -> Box<Future<Item = serde_json::Value, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>BrokerStatsApi for BrokerStatsApiClient<C> {
    fn get_allocator_stats(&self, allocator: &str) -> Box<Future<Item = crate::models::AllocatorStats, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/broker-stats/allocator-stats/{allocator}".to_string())
            .with_path_param("allocator".to_string(), allocator.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_broker_resource_availability(&self, tenant: &str, namespace: &str) -> Box<Future<Item = ::std::collections::HashMap<String, crate::models::ResourceUnit>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/broker-stats/broker-resource-availability/{tenant}/{namespace}".to_string())
            .with_path_param("tenant".to_string(), tenant.to_string())
            .with_path_param("namespace".to_string(), namespace.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_load_report(&self, ) -> Box<Future<Item = crate::models::LoadReport, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/broker-stats/load-report".to_string())
            .execute(self.configuration.borrow())
    }

    fn get_m_beans(&self, ) -> Box<Future<Item = Vec<crate::models::Metrics>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/broker-stats/mbeans".to_string())
            .execute(self.configuration.borrow())
    }

    fn get_metrics(&self, ) -> Box<Future<Item = Vec<crate::models::Metrics>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/broker-stats/metrics".to_string())
            .execute(self.configuration.borrow())
    }

    fn get_pending_bookie_ops_stats(&self, ) -> Box<Future<Item = ::std::collections::HashMap<String, crate::models::PendingBookieOpsStats>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/broker-stats/bookieops".to_string())
            .execute(self.configuration.borrow())
    }

    fn get_topics2(&self, ) -> Box<Future<Item = serde_json::Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/broker-stats/topics".to_string())
            .execute(self.configuration.borrow())
    }

}
